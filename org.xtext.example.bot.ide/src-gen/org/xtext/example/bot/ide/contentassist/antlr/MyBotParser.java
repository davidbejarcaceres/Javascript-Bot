/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.bot.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.bot.ide.contentassist.antlr.internal.InternalMyBotParser;
import org.xtext.example.bot.services.MyBotGrammarAccess;

public class MyBotParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyBotGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyBotGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBotAccess().getGroup(), "rule__Bot__Group__0");
			builder.put(grammarAccess.getShowsAccess().getGroup(), "rule__Shows__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getActionSayAccess().getGroup(), "rule__ActionSay__Group__0");
			builder.put(grammarAccess.getActionAskAccess().getGroup(), "rule__ActionAsk__Group__0");
			builder.put(grammarAccess.getActionRecommendAccess().getGroup(), "rule__ActionRecommend__Group__0");
			builder.put(grammarAccess.getBotAccess().getShowsAssignment_2(), "rule__Bot__ShowsAssignment_2");
			builder.put(grammarAccess.getBotAccess().getStateAssignment_3(), "rule__Bot__StateAssignment_3");
			builder.put(grammarAccess.getShowsAccess().getShowTypeAssignment_2(), "rule__Shows__ShowTypeAssignment_2");
			builder.put(grammarAccess.getShowsAccess().getGenreAssignment_4(), "rule__Shows__GenreAssignment_4");
			builder.put(grammarAccess.getShowsAccess().getLanguageAssignment_6(), "rule__Shows__LanguageAssignment_6");
			builder.put(grammarAccess.getShowsAccess().getTitleAssignment_8(), "rule__Shows__TitleAssignment_8");
			builder.put(grammarAccess.getShowTypeAccess().getNameAssignment(), "rule__ShowType__NameAssignment");
			builder.put(grammarAccess.getGenreAccess().getNameAssignment(), "rule__Genre__NameAssignment");
			builder.put(grammarAccess.getLanguageAccess().getNameAssignment(), "rule__Language__NameAssignment");
			builder.put(grammarAccess.getTitleAccess().getNameAssignment(), "rule__Title__NameAssignment");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getActionSayAssignment_2(), "rule__State__ActionSayAssignment_2");
			builder.put(grammarAccess.getStateAccess().getActionAskAssignment_3(), "rule__State__ActionAskAssignment_3");
			builder.put(grammarAccess.getStateAccess().getActionRecommendAssignment_4(), "rule__State__ActionRecommendAssignment_4");
			builder.put(grammarAccess.getActionSayAccess().getTextAssignment_1(), "rule__ActionSay__TextAssignment_1");
			builder.put(grammarAccess.getActionAskAccess().getTextAssignment_1(), "rule__ActionAsk__TextAssignment_1");
			builder.put(grammarAccess.getActionAskAccess().getAskVariableAssignment_2(), "rule__ActionAsk__AskVariableAssignment_2");
			builder.put(grammarAccess.getActionRecommendAccess().getTextAssignment_1(), "rule__ActionRecommend__TextAssignment_1");
			builder.put(grammarAccess.getActionRecommendAccess().getAskRecommendAssignment_2(), "rule__ActionRecommend__AskRecommendAssignment_2");
			builder.put(grammarAccess.getTextAccess().getNameAssignment(), "rule__Text__NameAssignment");
			builder.put(grammarAccess.getAskVariableAccess().getNameAssignment(), "rule__AskVariable__NameAssignment");
			builder.put(grammarAccess.getAskRecommendAccess().getNameAssignment(), "rule__AskRecommend__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyBotGrammarAccess grammarAccess;

	@Override
	protected InternalMyBotParser createParser() {
		InternalMyBotParser result = new InternalMyBotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyBotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyBotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
