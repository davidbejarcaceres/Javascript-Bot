/**
 * generated by Xtext 2.17.1
 * Author: David Béjar Cáceres 2019
 */
package org.xtext.example.bot.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.bot.myBot.ActionAsk;
import org.xtext.example.bot.myBot.AskRecommend;
import org.xtext.example.bot.myBot.AskVariable;
import org.xtext.example.bot.myBot.Bot;
import org.xtext.example.bot.myBot.Shows;
import org.xtext.example.bot.myBot.State;
import org.xtext.example.bot.myBot.Text;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyBotGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _className = this.className(resource);
    String _plus = (_className + ".js");
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    fsa.generateFile(_plus, 
      this.toJavaCode(((Bot) _head)));
  }
  
  public String className(final Resource res) {
    String name = res.getURI().lastSegment();
    return name.substring(0, name.indexOf("."));
  }
  
  public CharSequence toJavaCode(final Bot sm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var restify = require(\'restify\');");
    _builder.newLine();
    _builder.append("var builder = require(\'botbuilder\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Creates global variables");
    _builder.newLine();
    {
      EList<State> _state = sm.getState();
      for(final State state : _state) {
        {
          EList<ActionAsk> _actionAsk = state.getActionAsk();
          for(final ActionAsk aa : _actionAsk) {
            String variableName = aa.getAskVariable().get(0).getName();
            _builder.append("var ");
            int _length = variableName.length();
            int _minus = (_length - 1);
            String _substring = variableName.substring(1, _minus);
            _builder.append(_substring);
            _builder.append(" = \"\";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("//Define characteristics that match with shows ");
    _builder.newLine();
    _builder.append("var characteristics=[]");
    _builder.newLine();
    {
      EList<Shows> _shows = sm.getShows();
      for(final Shows show : _shows) {
        String tipo = show.getShowType().get(0).getName();
        _builder.newLineIfNotEmpty();
        String genero = show.getGenre().get(0).getName();
        _builder.newLineIfNotEmpty();
        String idioma = show.getLanguage().get(0).getName();
        _builder.newLineIfNotEmpty();
        _builder.append("characteristics[");
        int _indexOf = sm.getShows().indexOf(show);
        _builder.append(_indexOf);
        _builder.append("] =  \"");
        String _lowerCase = tipo.toLowerCase();
        _builder.append(_lowerCase);
        _builder.append("\" + \"");
        String _lowerCase_1 = genero.toLowerCase();
        _builder.append(_lowerCase_1);
        _builder.append("\" + \"");
        String _lowerCase_2 = idioma.toLowerCase();
        _builder.append(_lowerCase_2);
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("//Define the shows that match with the characteristics");
    _builder.newLine();
    _builder.append("var shows=[]");
    _builder.newLine();
    {
      EList<Shows> _shows_1 = sm.getShows();
      for(final Shows show_1 : _shows_1) {
        String titulo = show_1.getTitle().get(0).getName().getName();
        _builder.append("shows[");
        int _indexOf_1 = sm.getShows().indexOf(show_1);
        _builder.append(_indexOf_1);
        _builder.append("] =  \"");
        _builder.append(titulo);
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("// Setup Restify Server");
    _builder.newLine();
    _builder.append("var server = restify.createServer();");
    _builder.newLine();
    _builder.append("server.listen(process.env.port || process.env.PORT || 3978, function () {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("console.log(\'%s listening to %s\', server.name, server.url);");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Create chat connector for communicating with the Bot Framework Service");
    _builder.newLine();
    _builder.append("var connector = new builder.ChatConnector({");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("appId: process.env.MICROSOFT_APP_ID,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("appPassword: process.env.MICROSOFT_APP_PASSWORD");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Listen for messages from users");
    _builder.newLine();
    _builder.append("server.post(\'/api/messages\', connector.listen());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Service dialog");
    _builder.newLine();
    _builder.append("var bot = new builder.UniversalBot(connector, [");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Initial welcome");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("function (session) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("// A Card\'s Submit Action obj for reservation was received");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if (session.message && session.message.value) {");
    _builder.newLine();
    _builder.append("\t            \t");
    _builder.append("//Call the processSubmitAction Function to process reservation");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("processSubmitAction(session, session.message.value);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("//ITERATE STATES-ACTION");
    _builder.newLine();
    {
      EList<State> _state_1 = sm.getState();
      for(final State state_1 : _state_1) {
        _builder.append("\t");
        CharSequence _generateCode = this.generateCode(state_1);
        _builder.append(_generateCode, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("//END OF THE MAIN BODY");
    _builder.newLine();
    _builder.append("])");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Capture and process reservation");
    _builder.newLine();
    _builder.append("function processSubmitAction(session, value) { var reply=value.reply;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (reply.toLowerCase()==\"no\"){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("session.send(\"We are sorry you didn\'t want to buy it. You can search for a different one!\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else if (reply.toLowerCase()==\"yes\"){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("session.send(\"Congratulations, you just bought it :)!\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("session.send(\"Congratulations, you just bought season(s) \" + reply + \" :)!\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("session.endDialog();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCode(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((!state.getName().equals("Four")) && (!state.getName().equals("Five")))) {
        _builder.append("\t");
        CharSequence _generateSay = this.generateSay(state.getActionSay().get(0).getText());
        _builder.append(_generateSay, "\t");
        _builder.newLineIfNotEmpty();
        CharSequence _generateAsk = this.generateAsk(state.getActionAsk().get(0).getText(), state.getActionAsk().get(0).getAskVariable());
        _builder.append(_generateAsk);
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals = state.getName().equals("Four");
        if (_equals) {
          CharSequence _generateRecommendFound = this.generateRecommendFound(state);
          _builder.append(_generateRecommendFound);
          _builder.newLineIfNotEmpty();
        } else {
          CharSequence _generateRecommendNotFound = this.generateRecommendNotFound(state);
          _builder.append(_generateRecommendNotFound);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateRecommendNotFound(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (showFound == false){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var random = parseInt(Math.random() * (characteristics.length - 1));");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateSay = this.generateSay(state.getActionSay().get(0).getText());
    _builder.append(_generateSay, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    CharSequence _generateRecommendMessage = this.generateRecommendMessage(state.getActionRecommend().get(0).getText(), "random");
    _builder.append(_generateRecommendMessage, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("bot.dialog(shows[random], require(\'./\'+shows[random])); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("session.beginDialog(shows[random]);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateRecommendFound(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    String userCharacteristics = this.caracteristicsList(state);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var userCharacteristics = ");
    _builder.append(userCharacteristics, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("var showFound = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (i=0; i<characteristics.length; i++){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (userCharacteristics == characteristics[i]){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("showFound = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    CharSequence _generateSay = this.generateSay(state.getActionSay().get(0).getText());
    _builder.append(_generateSay, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    CharSequence _generateRecommendMessage = this.generateRecommendMessage(state.getActionRecommend().get(0).getText(), "i");
    _builder.append(_generateRecommendMessage, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("bot.dialog(shows[i], require(\'./\'+shows[i]));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("session.beginDialog(shows[i]);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateRecommendMessage(final EList<Text> list, final String index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("session.send(\"");
    String _name = list.get(0).getName();
    _builder.append(_name);
    _builder.append("\" + \"***\" + shows[");
    _builder.append(index);
    _builder.append("] + \"***\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateAsk(final EList<Text> listActionAsk, final EList<AskVariable> listAskVariable) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("builder.Prompts.text(session, \"");
    String _name = listActionAsk.get(0).getName();
    _builder.append(_name, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    _builder.append("function (session, results) {");
    _builder.newLine();
    _builder.append("\t");
    String variableName = listAskVariable.get(0).getName();
    int _length = variableName.length();
    int _minus = (_length - 1);
    String _substring = variableName.substring(1, _minus);
    _builder.append(_substring, "\t");
    _builder.append(" = results.response.toLowerCase();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateSay(final EList<Text> listSay) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Text say : listSay) {
        _builder.append("session.send(\"");
        String _name = say.getName();
        _builder.append(_name);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public String caracteristicsList(final State state) {
    String carac = "";
    int numVariables = state.getActionRecommend().get(0).getAskRecommend().size();
    EList<AskRecommend> _askRecommend = state.getActionRecommend().get(0).getAskRecommend();
    for (final AskRecommend variable : _askRecommend) {
      {
        String nombre = variable.getName();
        int _indexOf = state.getActionRecommend().get(0).getAskRecommend().indexOf(variable);
        boolean _notEquals = (_indexOf != (numVariables - 1));
        if (_notEquals) {
          int _length = nombre.length();
          int _minus = (_length - 1);
          String _substring = nombre.substring(1, _minus);
          String _plus = (carac + _substring);
          String _plus_1 = (_plus + " + ");
          String _plus_2 = (_plus_1 + " ");
          carac = _plus_2;
        } else {
          int _length_1 = nombre.length();
          int _minus_1 = (_length_1 - 1);
          String _substring_1 = nombre.substring(1, _minus_1);
          String _plus_3 = (carac + _substring_1);
          carac = _plus_3;
        }
      }
    }
    return carac;
  }
}
