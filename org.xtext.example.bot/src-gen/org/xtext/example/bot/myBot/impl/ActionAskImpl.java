/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.bot.myBot.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.bot.myBot.ActionAsk;
import org.xtext.example.bot.myBot.AskVariable;
import org.xtext.example.bot.myBot.MyBotPackage;
import org.xtext.example.bot.myBot.Text;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action Ask</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.bot.myBot.impl.ActionAskImpl#getText <em>Text</em>}</li>
 *   <li>{@link org.xtext.example.bot.myBot.impl.ActionAskImpl#getAskVariable <em>Ask Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionAskImpl extends MinimalEObjectImpl.Container implements ActionAsk
{
  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected EList<Text> text;

  /**
   * The cached value of the '{@link #getAskVariable() <em>Ask Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAskVariable()
   * @generated
   * @ordered
   */
  protected EList<AskVariable> askVariable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionAskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyBotPackage.Literals.ACTION_ASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Text> getText()
  {
    if (text == null)
    {
      text = new EObjectContainmentEList<Text>(Text.class, this, MyBotPackage.ACTION_ASK__TEXT);
    }
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AskVariable> getAskVariable()
  {
    if (askVariable == null)
    {
      askVariable = new EObjectContainmentEList<AskVariable>(AskVariable.class, this, MyBotPackage.ACTION_ASK__ASK_VARIABLE);
    }
    return askVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyBotPackage.ACTION_ASK__TEXT:
        return ((InternalEList<?>)getText()).basicRemove(otherEnd, msgs);
      case MyBotPackage.ACTION_ASK__ASK_VARIABLE:
        return ((InternalEList<?>)getAskVariable()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyBotPackage.ACTION_ASK__TEXT:
        return getText();
      case MyBotPackage.ACTION_ASK__ASK_VARIABLE:
        return getAskVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyBotPackage.ACTION_ASK__TEXT:
        getText().clear();
        getText().addAll((Collection<? extends Text>)newValue);
        return;
      case MyBotPackage.ACTION_ASK__ASK_VARIABLE:
        getAskVariable().clear();
        getAskVariable().addAll((Collection<? extends AskVariable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.ACTION_ASK__TEXT:
        getText().clear();
        return;
      case MyBotPackage.ACTION_ASK__ASK_VARIABLE:
        getAskVariable().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.ACTION_ASK__TEXT:
        return text != null && !text.isEmpty();
      case MyBotPackage.ACTION_ASK__ASK_VARIABLE:
        return askVariable != null && !askVariable.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ActionAskImpl
