/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.bot.myBot.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.bot.myBot.Bot;
import org.xtext.example.bot.myBot.MyBotPackage;
import org.xtext.example.bot.myBot.Shows;
import org.xtext.example.bot.myBot.State;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bot</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.bot.myBot.impl.BotImpl#getShows <em>Shows</em>}</li>
 *   <li>{@link org.xtext.example.bot.myBot.impl.BotImpl#getState <em>State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BotImpl extends MinimalEObjectImpl.Container implements Bot
{
  /**
   * The cached value of the '{@link #getShows() <em>Shows</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShows()
   * @generated
   * @ordered
   */
  protected EList<Shows> shows;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected EList<State> state;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyBotPackage.Literals.BOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Shows> getShows()
  {
    if (shows == null)
    {
      shows = new EObjectContainmentEList<Shows>(Shows.class, this, MyBotPackage.BOT__SHOWS);
    }
    return shows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<State> getState()
  {
    if (state == null)
    {
      state = new EObjectContainmentEList<State>(State.class, this, MyBotPackage.BOT__STATE);
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyBotPackage.BOT__SHOWS:
        return ((InternalEList<?>)getShows()).basicRemove(otherEnd, msgs);
      case MyBotPackage.BOT__STATE:
        return ((InternalEList<?>)getState()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyBotPackage.BOT__SHOWS:
        return getShows();
      case MyBotPackage.BOT__STATE:
        return getState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyBotPackage.BOT__SHOWS:
        getShows().clear();
        getShows().addAll((Collection<? extends Shows>)newValue);
        return;
      case MyBotPackage.BOT__STATE:
        getState().clear();
        getState().addAll((Collection<? extends State>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.BOT__SHOWS:
        getShows().clear();
        return;
      case MyBotPackage.BOT__STATE:
        getState().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.BOT__SHOWS:
        return shows != null && !shows.isEmpty();
      case MyBotPackage.BOT__STATE:
        return state != null && !state.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BotImpl
