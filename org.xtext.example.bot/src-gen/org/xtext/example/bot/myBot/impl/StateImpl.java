/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.bot.myBot.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.bot.myBot.ActionAsk;
import org.xtext.example.bot.myBot.ActionRecommend;
import org.xtext.example.bot.myBot.ActionSay;
import org.xtext.example.bot.myBot.MyBotPackage;
import org.xtext.example.bot.myBot.State;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.bot.myBot.impl.StateImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.bot.myBot.impl.StateImpl#getActionSay <em>Action Say</em>}</li>
 *   <li>{@link org.xtext.example.bot.myBot.impl.StateImpl#getActionAsk <em>Action Ask</em>}</li>
 *   <li>{@link org.xtext.example.bot.myBot.impl.StateImpl#getActionRecommend <em>Action Recommend</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StateImpl extends MinimalEObjectImpl.Container implements State
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getActionSay() <em>Action Say</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActionSay()
   * @generated
   * @ordered
   */
  protected EList<ActionSay> actionSay;

  /**
   * The cached value of the '{@link #getActionAsk() <em>Action Ask</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActionAsk()
   * @generated
   * @ordered
   */
  protected EList<ActionAsk> actionAsk;

  /**
   * The cached value of the '{@link #getActionRecommend() <em>Action Recommend</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActionRecommend()
   * @generated
   * @ordered
   */
  protected EList<ActionRecommend> actionRecommend;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyBotPackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyBotPackage.STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionSay> getActionSay()
  {
    if (actionSay == null)
    {
      actionSay = new EObjectContainmentEList<ActionSay>(ActionSay.class, this, MyBotPackage.STATE__ACTION_SAY);
    }
    return actionSay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionAsk> getActionAsk()
  {
    if (actionAsk == null)
    {
      actionAsk = new EObjectContainmentEList<ActionAsk>(ActionAsk.class, this, MyBotPackage.STATE__ACTION_ASK);
    }
    return actionAsk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ActionRecommend> getActionRecommend()
  {
    if (actionRecommend == null)
    {
      actionRecommend = new EObjectContainmentEList<ActionRecommend>(ActionRecommend.class, this, MyBotPackage.STATE__ACTION_RECOMMEND);
    }
    return actionRecommend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyBotPackage.STATE__ACTION_SAY:
        return ((InternalEList<?>)getActionSay()).basicRemove(otherEnd, msgs);
      case MyBotPackage.STATE__ACTION_ASK:
        return ((InternalEList<?>)getActionAsk()).basicRemove(otherEnd, msgs);
      case MyBotPackage.STATE__ACTION_RECOMMEND:
        return ((InternalEList<?>)getActionRecommend()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyBotPackage.STATE__NAME:
        return getName();
      case MyBotPackage.STATE__ACTION_SAY:
        return getActionSay();
      case MyBotPackage.STATE__ACTION_ASK:
        return getActionAsk();
      case MyBotPackage.STATE__ACTION_RECOMMEND:
        return getActionRecommend();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyBotPackage.STATE__NAME:
        setName((String)newValue);
        return;
      case MyBotPackage.STATE__ACTION_SAY:
        getActionSay().clear();
        getActionSay().addAll((Collection<? extends ActionSay>)newValue);
        return;
      case MyBotPackage.STATE__ACTION_ASK:
        getActionAsk().clear();
        getActionAsk().addAll((Collection<? extends ActionAsk>)newValue);
        return;
      case MyBotPackage.STATE__ACTION_RECOMMEND:
        getActionRecommend().clear();
        getActionRecommend().addAll((Collection<? extends ActionRecommend>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyBotPackage.STATE__ACTION_SAY:
        getActionSay().clear();
        return;
      case MyBotPackage.STATE__ACTION_ASK:
        getActionAsk().clear();
        return;
      case MyBotPackage.STATE__ACTION_RECOMMEND:
        getActionRecommend().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyBotPackage.STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyBotPackage.STATE__ACTION_SAY:
        return actionSay != null && !actionSay.isEmpty();
      case MyBotPackage.STATE__ACTION_ASK:
        return actionAsk != null && !actionAsk.isEmpty();
      case MyBotPackage.STATE__ACTION_RECOMMEND:
        return actionRecommend != null && !actionRecommend.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //StateImpl
